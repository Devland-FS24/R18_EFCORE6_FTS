{"ast":null,"code":"var _jsxFileName = \"F:\\\\Ready to use\\\\Entanglement\\\\Job\\\\cv\\\\CANDIDATE EMPLOYER\\\\CLEAR JAVIER CRUZ\\\\Prueba tecnica\\\\LAB\\\\MovRE_2\\\\ClientApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Col, Container, Row, Card, CardHeader, CardBody, Button } from \"reactstrap\";\nimport MovieModal from \"./components/MovieModal\";\nimport MovieTable from \"./components/MovieTable\";\nimport CastingModal from \"./components/CastingModal\";\nimport CastingTable from \"./components/CastingTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [casting, setCastings] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [edit, setEdit] = useState(null);\n\n  const showMovies = async () => {\n    const response = await fetch(\"api/movie/GetCastByMovieId\");\n\n    if (response.ok) {\n      const data = await response.json();\n      setMovies(data);\n    } else {\n      console.log(\"error fetching data\");\n    }\n  };\n\n  useEffect(() => {\n    showMovies();\n  }, []);\n\n  const saveMovie = async movie => {\n    const response = await fetch(\"api/movie/GetMovies\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(movie)\n    });\n\n    if (response.ok) {\n      setShowModal(!showModal);\n      showMovies();\n    }\n  };\n  /*-------------------------------------------------------*/\n  //const editMovie = async (movie) => {\n  //    const response = await fetch(\"api/department/EditMovie\", {\n  //        method: 'PUT',\n  //        headers: {\n  //            'Content-Type': 'application/json;charset=utf-8'\n  //        },\n  //        body: JSON.stringify(movie)\n  //    })\n  //    if (response.ok) {\n  //        setShowModal(!showModal);\n  //        showMovies();\n  //    }\n  //}\n\n  /*---------------------------------------------*/\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: \"12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Movies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            children: /*#__PURE__*/_jsxDEV(MovieTable, {\n              data: movies,\n              setEdit: setEdit,\n              showModal: showModal,\n              setShowModal: setShowModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieModal, {\n      showModal: showModal,\n      setShowModal: setShowModal\n      /* saveMovie={saveMovie} */\n      ,\n      edit: edit,\n      setEdit: setEdit\n      /* editMovie={editMovie}*/\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"JSBijb7BqmENfJW2GIPSTvHA7eo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Col","Container","Row","Card","CardHeader","CardBody","Button","MovieModal","MovieTable","CastingModal","CastingTable","App","movies","setMovies","casting","setCastings","showModal","setShowModal","edit","setEdit","showMovies","response","fetch","ok","data","json","console","log","saveMovie","movie","method","headers","body","JSON","stringify"],"sources":["F:/Ready to use/Entanglement/Job/cv/CANDIDATE EMPLOYER/CLEAR JAVIER CRUZ/Prueba tecnica/LAB/MovRE_2/ClientApp/src/App.js"],"sourcesContent":["\r\nimport { useEffect, useState } from \"react\"\r\nimport { Col, Container, Row, Card, CardHeader, CardBody, Button } from \"reactstrap\"\r\nimport MovieModal from \"./components/MovieModal\";\r\nimport MovieTable from \"./components/MovieTable\";\r\nimport CastingModal from \"./components/CastingModal\";\r\nimport CastingTable from \"./components/CastingTable\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [movies, setMovies] = useState([])\r\n    const [casting, setCastings] = useState([])\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [edit, setEdit] = useState(null)\r\n\r\n    const showMovies = async () => {\r\n\r\n        const response = await fetch(\"api/movie/GetCastByMovieId\")\r\n\r\n        if (response.ok) {\r\n            const data = await response.json(); \r\n            setMovies(data)\r\n        } else {\r\n            console.log(\"error fetching data\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        showMovies()\r\n    }, [])\r\n\r\n\r\n    const saveMovie = async (movie) => {\r\n        const response = await fetch(\"api/movie/GetMovies\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(movie)\r\n        })\r\n\r\n        if (response.ok) {\r\n            setShowModal(!showModal);\r\n            showMovies();\r\n        }\r\n    }\r\n\r\n\r\n    /*-------------------------------------------------------*/\r\n\r\n    //const editMovie = async (movie) => {\r\n    //    const response = await fetch(\"api/department/EditMovie\", {\r\n    //        method: 'PUT',\r\n    //        headers: {\r\n    //            'Content-Type': 'application/json;charset=utf-8'\r\n    //        },\r\n    //        body: JSON.stringify(movie)\r\n    //    })\r\n\r\n    //    if (response.ok) {\r\n    //        setShowModal(!showModal);\r\n    //        showMovies();\r\n    //    }\r\n    //}\r\n\r\n    /*---------------------------------------------*/\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"mt-5\">\r\n                <Col sm=\"12\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <h5>Movies</h5>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {/*<Button size=\"sm\" color=\"success\"*/}\r\n                            {/*    onClick={() => setShowModal(!showModal)}*/}\r\n                            {/*>New Movie</Button>*/}\r\n                            {/*<hr></hr>*/}\r\n                            <MovieTable data={movies}\r\n                                setEdit={setEdit}\r\n                                showModal={showModal}\r\n                                setShowModal={setShowModal}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <MovieModal\r\n               showModal={showModal}\r\n\r\n                 setShowModal={setShowModal}\r\n                \r\n                /* saveMovie={saveMovie} */\r\n\r\n                 edit={edit} \r\n\r\n                setEdit={setEdit}\r\n\r\n                /* editMovie={editMovie}*/\r\n            />\r\n        </Container>\r\n    )\r\n}\r\nexport default App;"],"mappings":";;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,UAApC,EAAgDC,QAAhD,EAA0DC,MAA1D,QAAwE,YAAxE;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;;AAGA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAEd,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACe,OAAD,EAAUC,WAAV,IAAyBhB,QAAQ,CAAC,EAAD,CAAvC;EACA,MAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,IAAD,CAAhC;;EAEA,MAAMqB,UAAU,GAAG,YAAY;IAE3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAAD,CAA5B;;IAEA,IAAID,QAAQ,CAACE,EAAb,EAAiB;MACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;MACAZ,SAAS,CAACW,IAAD,CAAT;IACH,CAHD,MAGO;MACHE,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACH;EAEJ,CAXD;;EAcA7B,SAAS,CAAC,MAAM;IACZsB,UAAU;EACb,CAFQ,EAEN,EAFM,CAAT;;EAKA,MAAMQ,SAAS,GAAG,MAAOC,KAAP,IAAiB;IAC/B,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAD,EAAwB;MAChDQ,MAAM,EAAE,MADwC;MAEhDC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFuC;MAKhDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;IAL0C,CAAxB,CAA5B;;IAQA,IAAIR,QAAQ,CAACE,EAAb,EAAiB;MACbN,YAAY,CAAC,CAACD,SAAF,CAAZ;MACAI,UAAU;IACb;EACJ,CAbD;EAgBA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;EAEA;;;EAEA,oBACI,QAAC,SAAD;IAAA,wBACI,QAAC,GAAD;MAAK,SAAS,EAAC,MAAf;MAAA,uBACI,QAAC,GAAD;QAAK,EAAE,EAAC,IAAR;QAAA,uBACI,QAAC,IAAD;UAAA,wBACI,QAAC,UAAD;YAAA,uBACI;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UADJ;YAAA;YAAA;YAAA;UAAA,QADJ,eAII,QAAC,QAAD;YAAA,uBAKI,QAAC,UAAD;cAAY,IAAI,EAAER,MAAlB;cACI,OAAO,EAAEO,OADb;cAEI,SAAS,EAAEH,SAFf;cAGI,YAAY,EAAEC;YAHlB;cAAA;cAAA;cAAA;YAAA;UALJ;YAAA;YAAA;YAAA;UAAA,QAJJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAqBI,QAAC,UAAD;MACG,SAAS,EAAED,SADd;MAGK,YAAY,EAAEC;MAEf;MALJ;MAOK,IAAI,EAAEC,IAPX;MASI,OAAO,EAAEC;MAET;;IAXJ;MAAA;MAAA;MAAA;IAAA,QArBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAqCH,CAlGD;;GAAMR,G;;KAAAA,G;AAmGN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}